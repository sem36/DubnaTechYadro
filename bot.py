from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from fastapi_integration import get_breed_from_image
from db import save_ad_to_db, get_all_ads, get_breeds, init_db,update_ad_with_telegram
import os

def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
        [KeyboardButton("ü´∂ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=main_menu_keyboard()
    )

async def handle_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_announcement'] = {'description': None, 'photo': None, 'location': None}
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_announcement = context.user_data.get('current_announcement')
    if current_announcement and current_announcement['description'] is None:
        current_announcement['description'] = update.message.text
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu_keyboard())

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_announcement = context.user_data.get('current_announcement')
    if current_announcement and current_announcement['description'] is not None:
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f'photos/{photo_file.file_id}.jpg'
        os.makedirs('photos', exist_ok=True)
        await photo_file.download_to_drive(photo_path)
        current_announcement['photo'] = photo_path
        
        breed = get_breed_from_image(photo_path)
        if breed:
            user_telegram_id = update.message.from_user.id
            save_ad_to_db(current_announcement['description'], photo_path, current_announcement.get('location'), breed, user_telegram_id)
            del context.user_data['current_announcement']
            await update.message.reply_text(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ü–æ—Ä–æ–¥–∞: {breed}", reply_markup=main_menu_keyboard())
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.", reply_markup=main_menu_keyboard())








async def handle_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    breeds = get_breeds()
<<<<<<< HEAD
    
    filtered_breeds = [breed for breed in breeds if breed.isalpha() and breed.isascii()]
    if not filtered_breeds:
        filtered_breeds = breeds
    breeds = filtered_breeds
    
=======
>>>>>>> main
    keyboard = [[InlineKeyboardButton(breeds[i], callback_data=f"view_{breeds[i]}"),
                 InlineKeyboardButton(breeds[i+1], callback_data=f"view_{breeds[i+1]}")]
                for i in range(0, len(breeds) - 1, 2)]

    if len(breeds) % 2 != 0:
        keyboard.append([InlineKeyboardButton(breeds[-1], callback_data=f"view_{breeds[-1]}")])
    keyboard.append([InlineKeyboardButton("–í—Å–µ –ø–æ—Ä–æ–¥—ã", callback_data="view_all")])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


<<<<<<< HEAD
=======

>>>>>>> main
async def handle_breed_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    breed = query.data.split('_')[1] if query.data != "view_all" else None
    ads = get_all_ads()
    
    if breed:
<<<<<<< HEAD
        ads = [ad for ad in ads if ad[4].lower() == breed.lower() or breed.lower() in ad[4].lower()]
=======
        ads = [ad for ad in ads if ad[4] == breed]
>>>>>>> main
    
    if not ads:
        await query.message.reply_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ.", reply_markup=main_menu_keyboard())
        return

    context.user_data['ads'] = ads
    context.user_data['current_index'] = 0

    await show_ad(update, context)



<<<<<<< HEAD









=======
>>>>>>> main
async def show_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_index = context.user_data['current_index']
    ads = context.user_data['ads']
    
    ad_id, description, photo_data, location, breed, user_telegram_id = ads[current_index]
    
    breed_text = f"–ü–æ—Ä–æ–¥–∞: {breed}" if breed else "–ü–æ—Ä–æ–¥–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    location_text = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}" if location else "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    temp_photo_path = f'temp_photos/ad_{ad_id}.jpg'
    os.makedirs('temp_photos', exist_ok=True)
    with open(temp_photo_path, 'wb') as temp_file:
        temp_file.write(photo_data)

    navigation_keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_ad'),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_ad')
        ],
        [
            InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞", callback_data='adopt_pet')
        ]
    ])

    query = update.callback_query
    if query:
        await query.message.delete()
        await query.message.reply_photo(
            photo=open(temp_photo_path, 'rb'),
            caption=f"{breed_text}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{location_text}",
            reply_markup=navigation_keyboard
        )
    else:
        await update.message.reply_photo(
            photo=open(temp_photo_path, 'rb'),
            caption=f"{breed_text}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{location_text}",
            reply_markup=navigation_keyboard
        )


async def handle_adopt_pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    current_index = context.user_data.get('current_index', None)

    if current_index is None:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard())
        return

    ads = context.user_data['ads']
    ad = ads[current_index]
    owner_telegram_id = ad[5]

    try:
        owner_user = await context.bot.get_chat(owner_telegram_id)
        username = f"@{owner_user.username}" if owner_user.username else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç username"
    except telegram.error.BadRequest:
        username = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    await query.answer()
    await query.message.reply_text(
<<<<<<< HEAD
        f"–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {username}",
=======
        f"–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: {username}",
>>>>>>> main
        reply_markup=main_menu_keyboard()
    )

async def donations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üôè **–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à—É –º–∏—Å—Å–∏—é –ø–æ –ø–æ–∏—Å–∫—É –∂–∏–≤–æ—Ç–Ω—ã—Ö!**\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–∏—Ç–æ–º–Ω–∏–∫–∞:\n\n"
        "`0000 0000 0000 0000`\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!"
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üîç **–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "1. **–ö–∞–∫–∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ?**\n"
        "- –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º.\n\n"
        "2. **–ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏?**\n"
        "- –£–∫–∞–∂–∏—Ç–µ **—Ç–∏–ø** –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞, —Å–æ–±–∞–∫–∞ –∏ —Ç.–¥.).\n"
        "- –£–∫–∞–∂–∏—Ç–µ **–ø–æ—Ä–æ–¥—É** (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞).\n"
        "- –û–ø–∏—à–∏—Ç–µ **—Ü–≤–µ—Ç** –∏ **–æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã** (–ø—è—Ç–Ω–∞, —à—Ä–∞–º—ã –∏ —Ç.–¥.).\n"
        "- –£–∫–∞–∂–∏—Ç–µ **–≤–æ–∑—Ä–∞—Å—Ç** –∏ **–ø–æ–ª** –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n\n"
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ!"
    )
    await update.message.reply_text(help_text, reply_markup=main_menu_keyboard(), parse_mode='Markdown')

async def navigate_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    ads = context.user_data.get('ads', [])
    current_index = context.user_data.get('current_index', 0)
    
    if query.data == 'next_ad':
        current_index = (current_index + 1) % len(ads)
    elif query.data == 'prev_ad':
        current_index = (current_index - 1) % len(ads)
    
    context.user_data['current_index'] = current_index
    await show_ad(update, context)


def main():
    from telegram.ext import Application
    init_db()
    token = "7951976644:AAHhdZsL1sCoSQtOgvm1W5nKJJOCuFvRGsw"
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), handle_add))
    application.add_handler(MessageHandler(filters.Regex("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"), handle_view))
    application.add_handler(MessageHandler(filters.Regex("ü´∂ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"), donations))
    application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), handle_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_breed_selection, pattern="^view_"))
    application.add_handler(CallbackQueryHandler(navigate_ads, pattern='^(prev_ad|next_ad)$'))
    application.add_handler(CallbackQueryHandler(handle_adopt_pet, pattern='^adopt_pet$'))
    

    application.run_polling()

if __name__ == '__main__':
    main()
