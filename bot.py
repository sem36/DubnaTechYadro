import logging
import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = r'E:\Projects\DubnaTechYadro-Dima-A\animals_ads.db'

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            photo BLOB,
            description TEXT,
            location TEXT,
            breed TEXT,
            user_telegram_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

def save_ad_to_db(description, photo_path, location, breed, user_telegram_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    with open(photo_path, 'rb') as file:
        photo_data = file.read()
    cursor.execute('INSERT INTO ads (description, photo, location, breed, user_telegram_id) VALUES (?, ?, ?, ?, ?)', 
                   (description, photo_data, location, breed, user_telegram_id))
    conn.commit()
    conn.close()

def get_all_ads(breed=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø–æ—Ä–æ–¥–µ."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    if breed:
        cursor.execute('SELECT id, description, photo, location, breed, user_telegram_id FROM ads WHERE breed = ?', (breed,))
    else:
        cursor.execute('SELECT id, description, photo, location, breed, user_telegram_id FROM ads')
    ads = cursor.fetchall()
    conn.close()
    return ads

def get_breeds():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT breed FROM ads')
    breeds = [row[0] for row in cursor.fetchall() if row[0]]  # –ò—Å–∫–ª—é—á–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    conn.close()
    return breeds


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
        [KeyboardButton("ü´∂ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=main_menu_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def handle_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    context.user_data['current_announcement'] = {'description': None, 'photo': None, 'location': None, 'breed': None}
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    current_announcement = context.user_data.get('current_announcement')
    if current_announcement and current_announcement['description'] is None:
        current_announcement['description'] = update.message.text
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'.", reply_markup=main_menu_keyboard())

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    current_announcement = context.user_data.get('current_announcement')
    if current_announcement and current_announcement['description'] is not None:
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f'photos/{photo_file.file_id}.jpg'
        os.makedirs('photos', exist_ok=True)
        await photo_file.download_to_drive(photo_path)
        current_announcement['photo'] = photo_path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        user_telegram_id = update.message.from_user.id
        save_ad_to_db(
            current_announcement['description'],
            photo_path,
            current_announcement.get('location'),
            current_announcement.get('breed'),
            user_telegram_id
        )
        del context.user_data['current_announcement']
        await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.", reply_markup=main_menu_keyboard())

async def handle_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    breeds = get_breeds()
    if not breeds:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_keyboard())
        return

    print(f"–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥: {breeds}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    keyboard = [
        [
            InlineKeyboardButton(text=breeds[i], callback_data=f"view_{breeds[i]}"),
            InlineKeyboardButton(text=breeds[i+1], callback_data=f"view_{breeds[i+1]}")
        ]
        for i in range(0, len(breeds) - 1, 2)
    ]

    if len(breeds) % 2 != 0:
        keyboard.append([InlineKeyboardButton(text=breeds[-1], callback_data=f"view_{breeds[-1]}")])
    
    keyboard.append([InlineKeyboardButton(text="–í—Å–µ –ø–æ—Ä–æ–¥—ã", callback_data="view_all")])

    print(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_breed_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ."""
    query = update.callback_query
    breed = query.data.split('_')[1] if query.data != "view_all" else None
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    ads = get_all_ads(breed)
    
    if not ads:
        await query.message.reply_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ.", reply_markup=main_menu_keyboard())
        await query.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['ads'] = ads
    context.user_data['current_index'] = 0
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_ad(update, context)
    await query.answer()


async def show_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    current_index = context.user_data.get('current_index', 0)
    ads = context.user_data.get('ads', [])

    if not ads:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_menu_keyboard())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad_id, description, photo_data, location, breed, user_telegram_id = ads[current_index]
    breed_text = f"–ü–æ—Ä–æ–¥–∞: {breed}" if breed else "–ü–æ—Ä–æ–¥–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    location_text = f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}" if location else "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–æ—Ç–æ
    temp_photo_path = f'temp_photos/ad_{current_index}.jpg'
    os.makedirs('temp_photos', exist_ok=True)
    with open(temp_photo_path, 'wb') as temp_file:
        temp_file.write(photo_data)
    
    navigation_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev_ad'), InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='next_ad')],
        [InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ", callback_data=f'take_{user_telegram_id}')]
    ])
    
    query = update.callback_query
    if query:
        await query.message.delete()
        await query.message.reply_photo(
            photo=open(temp_photo_path, 'rb'),
            caption=f"{breed_text}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{location_text}",
            reply_markup=navigation_keyboard
        )
    else:
        await update.message.reply_photo(
            photo=open(temp_photo_path, 'rb'),
            caption=f"{breed_text}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{location_text}",
            reply_markup=navigation_keyboard
        )

async def navigate_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    ads = context.user_data['ads']
    current_index = context.user_data['current_index']
    if query.data == 'next_ad':
        current_index = (current_index + 1) % len(ads)
    elif query.data == 'prev_ad':
        current_index = (current_index - 1) % len(ads)
    context.user_data['current_index'] = current_index
    await show_ad(update, context)

async def handle_take_animal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'."""
    query = update.callback_query
    user_telegram_id = query.data.split('_')[1]
    
    try:
        user = await context.bot.get_chat(user_telegram_id)
        username = user.username
        
        if username:
            user_contact = f"@{username}"
        else:
            user_contact = "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É–∫–∞–∑–∞–ª username."
        
        await query.message.reply_text(f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {user_contact}", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.", reply_markup=main_menu_keyboard())
    
    await query.answer()

# –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async def donations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üôè **–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à—É –º–∏—Å—Å–∏—é –ø–æ –ø–æ–∏—Å–∫—É –∂–∏–≤–æ—Ç–Ω—ã—Ö!**\n\n"
        "–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
        "`0000 0000 0000 0000`\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!"
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

# –ü–æ–º–æ—â—å
async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üîç **–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "1. **–ö–∞–∫–∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ?**\n"
        "- –§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–º.\n\n"
        "2. **–ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏?**\n"
        "- –£–∫–∞–∂–∏—Ç–µ **—Ç–∏–ø** –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—à–∫–∞, —Å–æ–±–∞–∫–∞ –∏ —Ç.–¥.).\n"
        "- –£–∫–∞–∂–∏—Ç–µ **–ø–æ—Ä–æ–¥—É** (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞).\n"
        "- –û–ø–∏—à–∏—Ç–µ **—Ü–≤–µ—Ç** –∏ **–æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã** (–ø—è—Ç–Ω–∞, —à—Ä–∞–º—ã –∏ —Ç.–¥.).\n"
        "- –£–∫–∞–∂–∏—Ç–µ **–≤–æ–∑—Ä–∞—Å—Ç** –∏ **–ø–æ–ª** –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.\n\n"
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ!"
    )
    await update.message.reply_text(help_text, reply_markup=main_menu_keyboard(), parse_mode='Markdown')

def main():
    init_db()
    token = "7764937203:AAH9kBEQTlWg6QWXp4NkyaUMtk29tD0QTdY"  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), handle_add))
    application.add_handler(MessageHandler(filters.Regex("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"), handle_view))
    application.add_handler(MessageHandler(filters.Regex("ü´∂ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"), donations))
    application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), handle_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_breed_selection, pattern="^view_"))
    application.add_handler(CallbackQueryHandler(navigate_ads, pattern='^(prev_ad|next_ad)$'))
    application.add_handler(CallbackQueryHandler(handle_take_animal, pattern='^take_'))

    application.run_polling()

if __name__ == '__main__':
    main()
